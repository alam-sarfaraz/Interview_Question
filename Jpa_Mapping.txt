Annotations:

@Entity – Marks a class as a JPA entity (maps to a database table).
@Id – Marks the primary key of the entity.
@GeneratedValue – Automatically generates the primary key (e.g., AUTO_INCREMENT).
@OneToOne – Defines a one-to-one relationship between two entities.
@JoinColumn – Specifies the foreign key column that links two tables.
mappedBy – Tells JPA this side is not the owner; the foreign key is on the other side.
cascade = CascadeType.ALL – Automatically applies save, update, delete to the related entity.
fetch = FetchType.LAZY – Loads the related entity only when accessed (default is EAGER for One-to-One).
referencedColumnName – Specifies which column in the target table the foreign key refers to (default is primary key).
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Relationships Mapping

*********************One-to-One Relationship

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "profile_id", referencedColumnName = "id")
    private UserProfile userProfile;
}

@Entity
public class UserProfile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String address;
    private String phone;

    @OneToOne(mappedBy = "userProfile")  -- mappedBy – Tells JPA this side is not the owner; the foreign key is on the other side i.e created in User Table
    private User user; 
}
------------------------------------------------------------------------------------------------
*********************One-to-Many & Many-to-One


@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id")
    private Department department;
}


@Entity
public class Department {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Employee> employees;
}
--------------------------------------------------------------------------------------------------

*********************Many-to-Many

@Entity
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToMany
    @JoinTable(
        name = "students_courses",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private Set<Course> courses = new HashSet<>();
}

@Entity
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToMany(mappedBy = "courses") // Inverse side
    private Set<Student> students = new HashSet<>();
}

@ManyToMany
    Defines the many-to-many association.

@JoinTable
    Creates the join table with:
    name: Name of the join table.
    joinColumns: Column referring to this entity.
    inverseJoinColumns: Column referring to the other entity.

mappedBy
Used on the inverse side (Course in this example) to indicate that the relationship is already mapped by another entity.
-------------------------------------------------------------------------------------------
