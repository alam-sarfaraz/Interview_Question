
CREATE DATABASE interview_practice;
USE interview_practice;

CREATE TABLE departments (
    dept_id INT PRIMARY KEY AUTO_INCREMENT,
    dept_name VARCHAR(100)
);

CREATE TABLE employees (
    emp_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    hire_date DATE,
    dept_id INT,
    manager_id INT,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

CREATE TABLE salaries (
    salary_id INT PRIMARY KEY AUTO_INCREMENT,
    emp_id INT,
    amount DECIMAL(10,2),
    from_date DATE,
    to_date DATE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
);

CREATE TABLE projects (
    project_id INT PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(100),
    start_date DATE,
    end_date DATE,
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    emp_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    status VARCHAR(20),
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
);

----------------------------------------------------------------SAMPLE DATA
INSERT INTO departments (dept_name) VALUES
('HR'), ('IT'), ('Finance'), ('Marketing');

INSERT INTO employees (first_name, last_name, email, hire_date, dept_id, manager_id) VALUES
('John', 'Doe', 'john.doe@example.com', '2020-01-15', 2, NULL),
('Jane', 'Smith', 'jane.smith@example.com', '2021-03-10', 1, 1),
('Alex', 'Brown', 'alex.brown@example.com', '2019-11-01', 2, 1),
('Maria', 'Garcia', 'maria.garcia@example.com', '2022-06-12', 3, 3),
('James', 'Taylor', 'james.taylor@example.com', '2023-02-01', 4, 2);

INSERT INTO salaries (emp_id, amount, from_date, to_date) VALUES
(1, 80000, '2020-01-15', '2021-12-31'),
(1, 90000, '2022-01-01', NULL),
(2, 50000, '2021-03-10', NULL),
(3, 75000, '2019-11-01', NULL),
(4, 60000, '2022-06-12', NULL),
(5, 45000, '2023-02-01', NULL);

INSERT INTO projects (project_name, start_date, end_date, dept_id) VALUES
('Migration Project', '2021-01-01', '2021-12-31', 2),
('Recruitment Drive', '2022-01-01', '2022-06-30', 1),
('Financial Audit', '2023-01-01', NULL, 3),
('Marketing Campaign', '2023-05-01', '2023-08-01', 4);

INSERT INTO orders (emp_id, order_date, total_amount, status) VALUES
(1, '2023-06-10', 1200.50, 'Completed'),
(2, '2023-07-05', 500.00, 'Pending'),
(3, '2023-07-20', 3000.00, 'Completed'),
(4, '2023-08-01', 250.00, 'Cancelled'),
(5, '2023-08-10', 150.75, 'Completed');
--------------------------------------------------------------------------
QUESTION WITH ANSWER

----------------------------Basic Level (1–20)

Retrieve all employee details.
Find the names and emails of employees hired after 2021-01-01.
List all department names.
Get employee count per department.
Find employees without a manager.
Retrieve employees ordered by hire date (newest first).
Select distinct department IDs from employees table.
Count total number of employees.
Find maximum salary from salaries table.
Find minimum salary from salaries table.
Get average salary of all employees.
Find all orders placed in July 2023.
Retrieve employees whose first name starts with ‘J’.
Show employees working in the IT department.
Retrieve orders with status "Completed".
Count how many projects each department has.
Find the earliest hire date.
Display employees with no recorded salary.
Get employees hired in 2022 or later.
Find employees with the same manager.

---------------------------Intermediate Level (21–60)

Find the second highest salary.
Retrieve top 3 highest paid employees.
List employees with salary > average salary.
Show department name along with employee name.
Find employees working on a project from their department.
Get total salary expense per department.
Retrieve employees and their current salary (latest one).
Find employees who haven’t placed any orders.
Get total order amount per employee.
Find employees with more than one order.
Show employees whose manager is in a different department.
Retrieve the department with the highest average salary.
Find employees who joined before their manager.
List employees whose salary is between 50,000 and 80,000.
Show employees with no assigned department.
Retrieve employees and their project names (if any).
Find employees who have worked on more than one project.
Get all managers and their team size.
Calculate total revenue from orders marked "Completed".
Find employees with orders > 1000 amount.
Find orders placed by employees from Finance department.
Get average salary per year (from salaries table).
Show salary history for employee 'John Doe'.
Find employees without salary changes (only one record).
Get employees with salaries that are NULL in to_date.
Retrieve all employees and indicate if they are managers.
Show number of employees hired each year.
Find the project with the longest duration.
Get employees hired on weekends.
Find employees who left before 2022 (salary ended).
Show employees and number of orders placed by them.
Retrieve employees whose names contain 'a'.
Get total orders per status (Completed, Pending, etc.).
Find employees with no email set.
List employees working in HR or Marketing.
Retrieve total salary spent for employees who placed orders.
Find top 2 departments with the most projects.
Show employees and their managers' names (self-join).
Get total order amount by month.
Find employees not linked to any project.
----------------------------------------------Advanced Level (61–100)
Rank employees by salary using RANK().
Find the Nth highest salary (parameterized).
Show moving average salary per department.
Write a query to pivot orders by status (Completed, Pending).
Retrieve employees with overlapping salary periods.
Calculate year-over-year salary increase per employee.
Show employees with salary growth > 10%.
Retrieve cumulative order amount per employee.
Find employees who never had a salary increase.
List managers with average team salary.
Show employees who joined before all their peers in department.
Retrieve employees whose salaries are below department median.
Write a stored procedure to increase salaries by 5%.
Write a trigger to update order status automatically if payment received.
Write a view showing employee, department, and latest salary.
Find departments with no employees.
Retrieve employees with same salary as their manager.
Show employees who moved between departments (if any).
Find employees with gaps in salary records.
Write a query to delete employees with no salary and no orders.
Find orders where employee's salary is less than order amount.
Write a function to calculate bonus = 10% of total orders.
Retrieve top earning employee in each department.
Show the percentage contribution of each order to total sales.
Find departments with orders but no projects.
Show average time between orders for each employee.
Find employees with continuous salary for more than 3 years.
Write a recursive query to list all managers up the hierarchy.
Retrieve orders where status changed (history simulation).
Find employees with identical first and last names.
Retrieve department with highest revenue (from orders).
Find average salary difference between managers and their employees.
Write a query to find employees not assigned to any manager.
Find total salary cost for employees with more than 2 orders.
Show employees whose hire_date matches project start_date.
Write a query to list employee tenure in years.
Calculate salary percentile for each employee.
Find orders made after an employee's salary increase.
Retrieve employees whose salaries never decreased.
Create a materialized view (or simulated using table) of monthly revenue.

-----------------------------------------solution

Q1: Retrieve all employee details.
SELECT * FROM employees;

Output:

Q2: Find names and emails of employees hired after 2021-01-01.
SELECT first_name, last_name, email
FROM employees
WHERE hire_date > '2021-01-01';


first_name	last_name	email
Jane	Smith	jane.smith@example.com

Maria	Garcia	maria.garcia@example.com

James	Taylor	james.taylor@example.com

Q3: List all department names.
SELECT dept_name FROM departments;


Output:

dept_name
HR
IT
Finance
Marketing

Q4: Get employee count per department.
SELECT d.dept_name, COUNT(e.emp_id) AS employee_count
FROM departments d
LEFT JOIN employees e ON d.dept_id = e.dept_id
GROUP BY d.dept_name;


Output:

dept_name	employee_count
HR	1
IT	2
Finance	1
Marketing	1

Q5: Find employees without a manager.
SELECT first_name, last_name
FROM employees
WHERE manager_id IS NULL;


Output:

first_name	last_name
John	Doe

Q6: Retrieve employees ordered by hire date (newest first).
SELECT first_name, last_name, hire_date
FROM employees
ORDER BY hire_date DESC;


Output:

first_name	last_name	hire_date
James	Taylor	2023-02-01
Maria	Garcia	2022-06-12
Jane	Smith	2021-03-10
John	Doe	2020-01-15
Alex	Brown	2019-11-01

Q7: Select distinct department IDs from employees table.
SELECT DISTINCT dept_id FROM employees;


Output:

dept_id
1
2
3
4

Q8: Count total number of employees.
SELECT COUNT(*) AS total_employees FROM employees;


Output:

total_employees
5

Q9: Find maximum salary.
SELECT MAX(amount) AS max_salary FROM salaries;


Output:

max_salary
90000.00

Q10: Find minimum salary.
SELECT MIN(amount) AS min_salary FROM salaries;


Output:

min_salary
45000.00

Q11: Get average salary of all employees.
SELECT AVG(amount) AS avg_salary FROM salaries;


Output:

avg_salary
66666.67

Q12: Find all orders placed in July 2023.
SELECT * FROM orders
WHERE MONTH(order_date) = 7 AND YEAR(order_date) = 2023;


Output:

order_id	emp_id	order_date	total_amount	status
2	2	2023-07-05	500.00	Pending
3	3	2023-07-20	3000.00	Completed

Q13: Retrieve employees whose first name starts with ‘J’.
SELECT first_name, last_name
FROM employees
WHERE first_name LIKE 'J%';


Output:

first_name	last_name
John	Doe
Jane	Smith
James	Taylor

Q14: Show employees working in the IT department.
SELECT e.first_name, e.last_name
FROM employees e
JOIN departments d ON e.dept_id = d.dept_id
WHERE d.dept_name = 'IT';


Output:

first_name	last_name
John	Doe
Alex	Brown

Q15: Retrieve orders with status "Completed".
SELECT order_id, emp_id, total_amount
FROM orders
WHERE status = 'Completed';


Output:

order_id	emp_id	total_amount
1	1	1200.50
3	3	3000.00
5	5	150.75

Q16: Count how many projects each department has.
SELECT d.dept_name, COUNT(p.project_id) AS project_count
FROM departments d
LEFT JOIN projects p ON d.dept_id = p.dept_id
GROUP BY d.dept_name;


Output:

dept_name	project_count
HR	1
IT	1
Finance	1
Marketing	1

Q17: Find the earliest hire date.
SELECT MIN(hire_date) AS earliest_hire
FROM employees;


Output:

earliest_hire
2019-11-01

Q18: Display employees with no recorded salary.
SELECT e.first_name, e.last_name
FROM employees e
LEFT JOIN salaries s ON e.emp_id = s.emp_id
WHERE s.emp_id IS NULL;


Output:
No rows (all employees have a salary record).

Q19: Get employees hired in 2022 or later.
SELECT first_name, last_name, hire_date
FROM employees
WHERE hire_date >= '2022-01-01';


Output:

first_name	last_name	hire_date
Maria	Garcia	2022-06-12
James	Taylor	2023-02-01

Q20: Find employees with the same manager.
SELECT manager_id, GROUP_CONCAT(first_name, ' ', last_name) AS team
FROM employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id
HAVING COUNT(*) > 1;


Output:

manager_id	team
1	Jane Smith, Alex Brown

------------------------------------------------------------------------
CREATE DATABASE order_management;
USE order_management;

-- Customers Table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    city VARCHAR(50)
);

-- Products Table
CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2)
);

-- Orders Table
CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE,
    status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Order_Items Table
CREATE TABLE order_items (
    item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
------------------------------------------------------------------------
INSERT INTO customers (customer_name, email, city) VALUES
('John Doe', 'john@example.com', 'New York'),
('Jane Smith', 'jane@example.com', 'Los Angeles'),
('Michael Brown', 'michael@example.com', 'Chicago'),
('Emily Davis', 'emily@example.com', 'New York'),
('Sarah Wilson', 'sarah@example.com', 'Boston');

INSERT INTO products (product_name, category, price) VALUES
('Laptop', 'Electronics', 800.00),
('Smartphone', 'Electronics', 600.00),
('Desk Chair', 'Furniture', 120.00),
('Table', 'Furniture', 200.00),
('Headphones', 'Electronics', 150.00);

INSERT INTO orders (customer_id, order_date, status) VALUES
(1, '2025-08-01', 'Delivered'),
(2, '2025-08-03', 'Pending'),
(3, '2025-08-05', 'Cancelled'),
(1, '2025-08-06', 'Delivered'),
(4, '2025-08-08', 'Delivered');

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 1),
(1, 5, 2),
(2, 2, 1),
(2, 3, 1),
(3, 4, 2),
(4, 1, 1),
(4, 2, 1),
(5, 3, 3);
------------------------------------------------------------------------
----------------------------------------------------------Beginner Level
List all customers and their cities.
Show all products with price greater than 200.
Find all orders placed in August 2025.
Get the total number of orders for each status (Delivered, Pending, Cancelled).
------------------------------------------------------Intermediate Level
Retrieve customer name, order_id, and order_date for all delivered orders.
Find the total revenue from each product (quantity × price).
List customers who have placed more than one order.
Show the top 3 most expensive products.

----------------------------------------------------------Advanced Level
Find the total revenue generated by each customer.
Get customers who have never placed an order.
Retrieve products that were never ordered.
Find the city with the highest total order value.
Get the most frequently ordered product.

