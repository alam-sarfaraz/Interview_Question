If you have 1 lakh (100,000) records in your database and you want to fetch them efficiently.

1 Use Pagination with LIMIT and OFFSET

SELECT * FROM your_table LIMIT 1000 OFFSET 0;   -- First 1000 rows

SELECT * FROM your_table LIMIT 1000 OFFSET 1000;  -- Next 1000 rows


2 Use WHERE with Indexed Column for Better Pagination
SELECT * FROM your_table WHERE id > 0 ORDER BY id LIMIT 1000;

3 Fetch in Batches Using Cursor

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Second highest salary
select * from employee_detail e1 where 2-1 = (select distinct (count(salary)) from employee_detail e2 where e2.salary>e1.salary);

Delete dublicate record.
delete e1 from employee_detail e1 join employee_detail e2 on e1.name = e2.name and e1.emp_id>e2.emp_id;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
DBMS stands for Database Management System, is a set of programs that enable users to create and maintain a database. 
DBMS provides a tool or an interface for performing various operations such as inserting, deleting, updating, etc. into a database.
A DBMS system helps a user to overcome problems like data inconsistency, data redundancy, etc. in a database and makes it more convenient and organized to use it.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
RDBMS stands for Relational Database Management System.
RDBMS stores data in the form of tables as compared to DBMS which stores data as files. 
Storing data as rows and columns makes it easier to locate specific values in the database and makes it more efficient as compared to DBMS.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
MYSQL

MySQL is a Free open-source Relational Database Management System(RDMS) that stores data in a structured tabular format using rows and columns. It is fast, reliable, and easy to use. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------
What do you mean by ‘databases’?
A database is a structured collection of data stored in a computer system and organized in a way to be quickly searched. With databases, information can be rapidly retrieved.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Indexes
An index in MySQL is a data structure (usually a B-Tree).
Indexes are used to retrieve data from the database more quickly.
Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows.
When a table is created with a primary key or unique key, it automatically creates a special index named PRIMARY. We called this index as a clustered index. All indexes other than PRIMARY indexes are known as a non-clustered index or secondary index.
Types of Indexes in MySQL
Primary Key Index
Automatically created when you define a PRIMARY KEY.
Ensures uniqueness and cannot contain NULL.

Unique Index
Ensures all values in a column (or combination) are unique.
Allows one NULL value.

Regular (Non-Unique) Index
Speeds up searches but allows duplicate values.
Full-Text Index
Used for searching large text fields (TEXT, VARCHAR).
Allows natural language searching.

Composite Index
Index on multiple columns.
Useful when queries filter or sort by more than one column.


Cluster Index: An index type used to arrange data in a table is called a clustered index. The table’s data are stored in a specific order based on the clustered index.

Non Cluster Index: A non-clustered index is also a type of index used to organize data in a table. The table’s data are not stored in a specific order based on the non clustered index.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Views

MySQL Views are virtual tables that are defined by a query. They present the data as they are coming from a single table, but the data can actually come from one or multiple tables. Views do not store data themselves but display the results of a query whenever they are accessed. 

OR

Views in MySQL is nothing but a virtual table generated by the result of a SELECT query. A view is a concept rather than an actual table. View does not store any physical data rather it retrieves data from underlying base tables.

A view can be created by joining one or more base tables. The virtual tables (view) can be used as actual tables which will allow to make queries and retrieve data

CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
In MySQL triggers are database objects that are automatically executed or fired when a specified event occurs.
These events can be INSERT, UPDATE, or DELETE.
Why we need/use triggers in MySQL?
1 Triggers help us to enforce business rules.
2 Triggers help us to validate data even before they are inserted or updated.
3 SQL triggers provide an alternative way to check the integrity of data.
4 Triggers increases the performance of SQL queries because it does not need to compile each time the query is executed.
5 Triggers help us to keep a log of records like maintaining audit trails in tables.


Types of Triggers in MySQL?
We can define the maximum six types of actions or events in the form of triggers:

Before Insert: It is activated before the insertion of data into the table.
After Insert: It is activated after the insertion of data into the table.
Before Update: It is activated before the update of data in the table.
After Update: It is activated after the update of the data in the table.
Before Delete: It is activated before the data is removed from the table.
After Delete: It is activated after the deletion of data from the table.

CREATE TRIGGER trigger_name
{BEFORE | AFTER} {INSERT | UPDATE | DELETE}
ON table_name FOR EACH ROW
BEGIN
    -- SQL statements
END;
---------------------------------------------------------------------------------------------------------------------------------------------------------------
A stored procedure in MySQL is a set of SQL statements that you can save and reuse. It's like a function in programming that you can call to perform operations on the database. Stored procedures help improve code reusability, modularity, and performance.

CREATE PROCEDURE SimpleProcedure()
BEGIN
    SELECT 'Hello, World!';
END //

DELIMITER ;

CALL SimpleProcedure();
---------------------------------------------------------------------------------------------------------------------------------------------------------------
What is Sharding in SQL?
The process of breaking up large tables into smaller chunks (called shards) that are spread across multiple servers is called Sharding. 
The advantage of Sharding is that since the sharded database is generally much smaller than the original; queries, maintenance, and all other tasks are much faster.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Join
Join statement is used to combine data or rows from two or more tables based on a common field between them.

Four Types of join

INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN
---------------------------------------------------------------------------------------------------------------------------------------------------------------

INNER JOIN statement joins two tables based on a common column and selects rows that have matching values in these columns.

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
INNER JOIN table2
ON table1.matching_column = table2.matching_column;
---------------------------------------------------------------------------------------------------------------------------------------------------------------
LEFT JOIN − returns all rows from the left table, even if there are no matches in the right table.

This join returns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join. For the rows for which there is no matching row on the right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
LEFT JOIN table2
ON table1.matching_column = table2.matching_column;
---------------------------------------------------------------------------------------------------------------------------------------------------------------
RIGHT JOIN − returns all rows from the right table, even if there are no matches in the left table.

RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of the join. For the rows for which there is no matching row on the left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN. 

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
RIGHT JOIN table2
ON table1.matching_column = table2.matching_column;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Full join a type of SQL JOIN operation that retrieves all records from both tables, including matching and non-matching records. If there are no matching records in one or both tables, NULL values are included for those

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
FULL JOIN table2
ON table1.matching_column = table2.matching_column;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Explain the difference between having and where clause in MySQL.
WHERE statement is used to filter rows but HAVING statement is used to filter groups.
GROUP BY is not used with WHERE. HAVING clause is used with GROUP BY.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between DELETE and TRUNCATE commands in MySQL?
DELETE Command is used to delete rows from the table depending on given the condition. TRUNCATE command is used to DELETE all rows from the table. DELETE command is a Data Manipulation Language command. TRUNCATE command is a Data Definition Language command.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
36. What is the difference between UNION and UNION ALL in MySQL?
In MySQL, both UNION and UNION ALL are used to combine the results of two or more SELECT statements into a single result set. However, there are key differences between the two in terms of how they handle duplicate rows.

UNION: This operator combines the result sets of the SELECT statements and removes any duplicate rows, ensuring that each row in the result set is unique.

UNION ALL: This operator combines the result sets of the SELECT statements and includes all duplicates. It does not remove duplicate rows, so the result set may contain duplicate rows if they exist in the original result sets.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between CHAR and VARCHAR?
When a table is created, CHAR is used to define the fixed length of the table and columns. The length value could be in the range of 1–255. The VARCHAR command is used to adjust the column and table lengths as required.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between primary key and unique key?
While both are used to enforce the uniqueness of the column defined, the primary key would create a clustered index, whereas the unique key would create a non-clustered index on the column. The primary key does not allow ‘NULL’, but the unique key does. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What do DDL, DML, and DCL stand for?
DDL is the abbreviation for Data Definition Language dealing with database schemas, as well as the description of how data resides in the database. An example of this is the CREATE TABLE command. DML denotes Data Manipulation Language which includes commands such as SELECT, INSERT, etc. DCL stands for Data Control Language and includes commands like GRANT, REVOKE, etc.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What is the difference between the primary key and the candidate key?
The primary key in MySQL is used to identify every row of a table in a unique manner. For one table, there is only one primary key. The candidate keys can be used to reference the foreign keys. One of the candidate keys is the primary key.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Constraints in MySQL are rules that set on columns in a table to ensure the integrity, accuracy, and reliability of the data.
 
NOT NULL
Ensures a column always has a value.
Example: Age INT NOT NULL means Age cannot be empty.
2. UNIQUE
Ensures all values in a column are different.
Example: Email VARCHAR(100) UNIQUE means no two rows can have the same email.
3. PRIMARY KEY
Uniquely identifies each row in a table.
Combines NOT NULL and UNIQUE.
Example: ID INT PRIMARY KEY means ID is unique and not empty.
4. FOREIGN KEY
Ensures values in a column match values in another table.
Maintains relationships between tables.
Example: FOREIGN KEY (UserID) REFERENCES Users(ID) means UserID in this table must match an ID in the Users table.
5. CHECK
Ensures values in a column meet a specific condition.
Example: CHECK (Age >= 18) means Age must be 18 or older.
6. DEFAULT
Sets a default value if none is provided.
Example: OrderDate DATE DEFAULT CURRENT_DATE sets the current date as the default.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Subqueries, also known as nested queries or inner queries, are queries that are embedded within another query. 
Filtering and Selecting Data:
Complex Conditions

--------------------------------------------------------------------------------------------------------------------------------------------------------------
